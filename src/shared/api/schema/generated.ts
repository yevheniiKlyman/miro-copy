/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/boards': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get all boards for current user */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description List of boards */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Board'][];
          };
        };
        401: components['responses']['UnauthorizedError'];
      };
    };
    put?: never;
    /** Create a new board */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['CreateBoard'];
        };
      };
      responses: {
        /** @description Board created successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Board'];
          };
        };
        401: components['responses']['UnauthorizedError'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/boards/{boardId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Delete a board */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          boardId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Board deleted successfully */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        401: components['responses']['UnauthorizedError'];
        404: components['responses']['NotFoundError'];
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    Board: {
      id: string;
      name: string;
    };
    Error: {
      message: string;
      code: string;
    };
    CreateBoard: {
      name: string;
    };
  };
  responses: {
    /** @description Unauthorized */
    UnauthorizedError: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        'application/json': components['schemas']['Error'];
      };
    };
    /** @description Resource not found */
    NotFoundError: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        'application/json': components['schemas']['Error'];
      };
    };
  };
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
